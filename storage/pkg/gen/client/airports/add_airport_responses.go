// Code generated by go-swagger; DO NOT EDIT.

package airports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/amadeusitgroup/miniplanes/storage/pkg/gen/models"
)

// AddAirportReader is a Reader for the AddAirport structure.
type AddAirportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddAirportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewAddAirportCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewAddAirportDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddAirportCreated creates a AddAirportCreated with default headers values
func NewAddAirportCreated() *AddAirportCreated {
	return &AddAirportCreated{}
}

/*AddAirportCreated handles this case with default header values.

Created
*/
type AddAirportCreated struct {
	Payload *models.Airport
}

func (o *AddAirportCreated) Error() string {
	return fmt.Sprintf("[POST /airports][%d] addAirportCreated  %+v", 201, o.Payload)
}

func (o *AddAirportCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Airport)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAirportDefault creates a AddAirportDefault with default headers values
func NewAddAirportDefault(code int) *AddAirportDefault {
	return &AddAirportDefault{
		_statusCode: code,
	}
}

/*AddAirportDefault handles this case with default header values.

unexpected error
*/
type AddAirportDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the add airport default response
func (o *AddAirportDefault) Code() int {
	return o._statusCode
}

func (o *AddAirportDefault) Error() string {
	return fmt.Sprintf("[POST /airports][%d] addAirport default  %+v", o._statusCode, o.Payload)
}

func (o *AddAirportDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
