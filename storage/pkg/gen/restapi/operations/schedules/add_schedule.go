// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddScheduleHandlerFunc turns a function with the right signature into a add schedule handler
type AddScheduleHandlerFunc func(AddScheduleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddScheduleHandlerFunc) Handle(params AddScheduleParams) middleware.Responder {
	return fn(params)
}

// AddScheduleHandler interface for that can handle valid add schedule params
type AddScheduleHandler interface {
	Handle(AddScheduleParams) middleware.Responder
}

// NewAddSchedule creates a new http.Handler for the add schedule operation
func NewAddSchedule(ctx *middleware.Context, handler AddScheduleHandler) *AddSchedule {
	return &AddSchedule{Context: ctx, Handler: handler}
}

/*AddSchedule swagger:route POST /schedules schedules addSchedule

Creates a new schedule. Duplicates are not allowed

*/
type AddSchedule struct {
	Context *middleware.Context
	Handler AddScheduleHandler
}

func (o *AddSchedule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddScheduleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
