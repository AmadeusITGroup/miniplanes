// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSchdulesHandlerFunc turns a function with the right signature into a get schdules handler
type GetSchdulesHandlerFunc func(GetSchdulesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSchdulesHandlerFunc) Handle(params GetSchdulesParams) middleware.Responder {
	return fn(params)
}

// GetSchdulesHandler interface for that can handle valid get schdules params
type GetSchdulesHandler interface {
	Handle(GetSchdulesParams) middleware.Responder
}

// NewGetSchdules creates a new http.Handler for the get schdules operation
func NewGetSchdules(ctx *middleware.Context, handler GetSchdulesHandler) *GetSchdules {
	return &GetSchdules{Context: ctx, Handler: handler}
}

/*GetSchdules swagger:route GET /schdules schedules getSchdules

GetSchdules get schdules API

*/
type GetSchdules struct {
	Context *middleware.Context
	Handler GetSchdulesHandler
}

func (o *GetSchdules) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSchdulesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
