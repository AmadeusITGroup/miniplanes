// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"fmt"
	"log"
	"os"

	"github.com/amadeusitgroup/miniapp/itineraries-server/cmd/config"
	"github.com/amadeusitgroup/miniapp/itineraries-server/pkg/gen/restapi"
	"github.com/amadeusitgroup/miniapp/itineraries-server/pkg/gen/restapi/operations"
	loads "github.com/go-openapi/loads"
	flag "github.com/spf13/pflag"
)

func main() {

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	var server *restapi.Server // make sure init is called

	// Custom Vars
	flag.IntVar(&config.StoragePort, "storage-port", 8080, "the port of storage service")
	flag.StringVar(&config.StorageHost, "storage-host", "storage", "the name of the storage service")

	flag.Usage = func() {
		fmt.Fprint(os.Stderr, "Usage:\n")
		fmt.Fprint(os.Stderr, "  itineraries-server [OPTIONS]\n\n")

		title := "miniapp itineraries-server"
		fmt.Fprint(os.Stderr, title+"\n\n")
		desc := "needs to add a description"
		if desc != "" {
			fmt.Fprintf(os.Stderr, desc+"\n\n")
		}
		fmt.Fprintln(os.Stderr, flag.CommandLine.FlagUsages())
	}

	flag.Parse()

	api := operations.NewItinerariesAPI(swaggerSpec)
	server = restapi.NewServer(api)
	defer server.Shutdown()

	server.ConfigureAPI()
	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
