/*

MIT License

Copyright (c) 2019 Amadeus s.a.s.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "needs to add a description",
    "title": "An Itineraries server application",
    "version": "1.0.0"
  },
  "paths": {
    "/itineraries": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "itineraries"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "from",
            "in": "query"
          },
          {
            "type": "string",
            "name": "to",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of itineraries",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/itinerary"
              }
            }
          },
          "400": {
            "description": "generic error response",
            "schema": {
              "$ref": "../../storage/swagger/swagger.yaml#/definitions/error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "../../storage/swagger/swagger.yaml#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "../../storage/swagger/swagger.yaml#/definitions/error"
            }
          }
        }
      }
    },
    "/live": {
      "get": {
        "tags": [
          "liveness"
        ],
        "responses": {
          "200": {
            "description": "liveness probe"
          },
          "503": {
            "description": "if not alive",
            "schema": {
              "$ref": "../../storage/swagger/swagger.yaml#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "../../storage/swagger/swagger.yaml#/definitions/error"
            }
          }
        }
      }
    },
    "/ready": {
      "get": {
        "tags": [
          "readiness"
        ],
        "responses": {
          "200": {
            "description": "readiness probe"
          },
          "503": {
            "description": "if not ready",
            "schema": {
              "$ref": "../../storage/swagger/swagger.yaml#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "../../storage/swagger/swagger.yaml#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "itinerary": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "distance": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/itineraryStep"
          },
          "readOnly": true
        }
      }
    },
    "itineraryStep": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "needs to add a description",
    "title": "An Itineraries server application",
    "version": "1.0.0"
  },
  "paths": {
    "/itineraries": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "itineraries"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "from",
            "in": "query"
          },
          {
            "type": "string",
            "name": "to",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of itineraries",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/itinerary"
              }
            }
          },
          "400": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/live": {
      "get": {
        "tags": [
          "liveness"
        ],
        "responses": {
          "200": {
            "description": "liveness probe"
          },
          "503": {
            "description": "if not alive",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/ready": {
      "get": {
        "tags": [
          "readiness"
        ],
        "responses": {
          "200": {
            "description": "readiness probe"
          },
          "503": {
            "description": "if not ready",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "itinerary": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "distance": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/itineraryStep"
          },
          "readOnly": true
        }
      }
    },
    "itineraryStep": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    }
  }
}`))
}
