// Code generated by go-swagger; DO NOT EDIT.

package airports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAirportsHandlerFunc turns a function with the right signature into a get airports handler
type GetAirportsHandlerFunc func(GetAirportsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAirportsHandlerFunc) Handle(params GetAirportsParams) middleware.Responder {
	return fn(params)
}

// GetAirportsHandler interface for that can handle valid get airports params
type GetAirportsHandler interface {
	Handle(GetAirportsParams) middleware.Responder
}

// NewGetAirports creates a new http.Handler for the get airports operation
func NewGetAirports(ctx *middleware.Context, handler GetAirportsHandler) *GetAirports {
	return &GetAirports{Context: ctx, Handler: handler}
}

/*GetAirports swagger:route GET /airports airports getAirports

GetAirports get airports API

*/
type GetAirports struct {
	Context *middleware.Context
	Handler GetAirportsHandler
}

func (o *GetAirports) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAirportsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
