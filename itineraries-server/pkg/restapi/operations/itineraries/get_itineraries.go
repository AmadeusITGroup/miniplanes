/*
Copyright 2018 Amadeus SaS All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by go-swagger; DO NOT EDIT.

package itineraries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetItinerariesHandlerFunc turns a function with the right signature into a get itineraries handler
type GetItinerariesHandlerFunc func(GetItinerariesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetItinerariesHandlerFunc) Handle(params GetItinerariesParams) middleware.Responder {
	return fn(params)
}

// GetItinerariesHandler interface for that can handle valid get itineraries params
type GetItinerariesHandler interface {
	Handle(GetItinerariesParams) middleware.Responder
}

// NewGetItineraries creates a new http.Handler for the get itineraries operation
func NewGetItineraries(ctx *middleware.Context, handler GetItinerariesHandler) *GetItineraries {
	return &GetItineraries{Context: ctx, Handler: handler}
}

/*GetItineraries swagger:route GET /itineraries itineraries getItineraries

GetItineraries get itineraries API

*/
type GetItineraries struct {
	Context *middleware.Context
	Handler GetItinerariesHandler
}

func (o *GetItineraries) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetItinerariesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
