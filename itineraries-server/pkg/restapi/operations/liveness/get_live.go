/*
Copyright 2018 Amadeus SaS All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by go-swagger; DO NOT EDIT.

package liveness

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetLiveHandlerFunc turns a function with the right signature into a get live handler
type GetLiveHandlerFunc func(GetLiveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLiveHandlerFunc) Handle(params GetLiveParams) middleware.Responder {
	return fn(params)
}

// GetLiveHandler interface for that can handle valid get live params
type GetLiveHandler interface {
	Handle(GetLiveParams) middleware.Responder
}

// NewGetLive creates a new http.Handler for the get live operation
func NewGetLive(ctx *middleware.Context, handler GetLiveHandler) *GetLive {
	return &GetLive{Context: ctx, Handler: handler}
}

/*GetLive swagger:route GET /live liveness getLive

GetLive get live API

*/
type GetLive struct {
	Context *middleware.Context
	Handler GetLiveHandler
}

func (o *GetLive) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLiveParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
