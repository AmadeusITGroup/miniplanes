/*

MIT License

Copyright (c) 2019 Amadeus s.a.s.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
// Code generated by go-swagger; DO NOT EDIT.

package readiness

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetReadyHandlerFunc turns a function with the right signature into a get ready handler
type GetReadyHandlerFunc func(GetReadyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReadyHandlerFunc) Handle(params GetReadyParams) middleware.Responder {
	return fn(params)
}

// GetReadyHandler interface for that can handle valid get ready params
type GetReadyHandler interface {
	Handle(GetReadyParams) middleware.Responder
}

// NewGetReady creates a new http.Handler for the get ready operation
func NewGetReady(ctx *middleware.Context, handler GetReadyHandler) *GetReady {
	return &GetReady{Context: ctx, Handler: handler}
}

/*GetReady swagger:route GET /ready readiness getReady

GetReady get ready API

*/
type GetReady struct {
	Context *middleware.Context
	Handler GetReadyHandler
}

func (o *GetReady) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetReadyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
