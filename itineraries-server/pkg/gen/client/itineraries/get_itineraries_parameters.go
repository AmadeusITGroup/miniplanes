// Code generated by go-swagger; DO NOT EDIT.

package itineraries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetItinerariesParams creates a new GetItinerariesParams object
// with the default values initialized.
func NewGetItinerariesParams() *GetItinerariesParams {
	var ()
	return &GetItinerariesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetItinerariesParamsWithTimeout creates a new GetItinerariesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetItinerariesParamsWithTimeout(timeout time.Duration) *GetItinerariesParams {
	var ()
	return &GetItinerariesParams{

		timeout: timeout,
	}
}

// NewGetItinerariesParamsWithContext creates a new GetItinerariesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetItinerariesParamsWithContext(ctx context.Context) *GetItinerariesParams {
	var ()
	return &GetItinerariesParams{

		Context: ctx,
	}
}

// NewGetItinerariesParamsWithHTTPClient creates a new GetItinerariesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetItinerariesParamsWithHTTPClient(client *http.Client) *GetItinerariesParams {
	var ()
	return &GetItinerariesParams{
		HTTPClient: client,
	}
}

/*GetItinerariesParams contains all the parameters to send to the API endpoint
for the get itineraries operation typically these are written to a http.Request
*/
type GetItinerariesParams struct {

	/*DepartureDate*/
	DepartureDate *string
	/*From*/
	From *string
	/*ReturnDate*/
	ReturnDate *string
	/*To*/
	To *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get itineraries params
func (o *GetItinerariesParams) WithTimeout(timeout time.Duration) *GetItinerariesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get itineraries params
func (o *GetItinerariesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get itineraries params
func (o *GetItinerariesParams) WithContext(ctx context.Context) *GetItinerariesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get itineraries params
func (o *GetItinerariesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get itineraries params
func (o *GetItinerariesParams) WithHTTPClient(client *http.Client) *GetItinerariesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get itineraries params
func (o *GetItinerariesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDepartureDate adds the departureDate to the get itineraries params
func (o *GetItinerariesParams) WithDepartureDate(departureDate *string) *GetItinerariesParams {
	o.SetDepartureDate(departureDate)
	return o
}

// SetDepartureDate adds the departureDate to the get itineraries params
func (o *GetItinerariesParams) SetDepartureDate(departureDate *string) {
	o.DepartureDate = departureDate
}

// WithFrom adds the from to the get itineraries params
func (o *GetItinerariesParams) WithFrom(from *string) *GetItinerariesParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get itineraries params
func (o *GetItinerariesParams) SetFrom(from *string) {
	o.From = from
}

// WithReturnDate adds the returnDate to the get itineraries params
func (o *GetItinerariesParams) WithReturnDate(returnDate *string) *GetItinerariesParams {
	o.SetReturnDate(returnDate)
	return o
}

// SetReturnDate adds the returnDate to the get itineraries params
func (o *GetItinerariesParams) SetReturnDate(returnDate *string) {
	o.ReturnDate = returnDate
}

// WithTo adds the to to the get itineraries params
func (o *GetItinerariesParams) WithTo(to *string) *GetItinerariesParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get itineraries params
func (o *GetItinerariesParams) SetTo(to *string) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetItinerariesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DepartureDate != nil {

		// query param departureDate
		var qrDepartureDate string
		if o.DepartureDate != nil {
			qrDepartureDate = *o.DepartureDate
		}
		qDepartureDate := qrDepartureDate
		if qDepartureDate != "" {
			if err := r.SetQueryParam("departureDate", qDepartureDate); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom string
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ReturnDate != nil {

		// query param returnDate
		var qrReturnDate string
		if o.ReturnDate != nil {
			qrReturnDate = *o.ReturnDate
		}
		qReturnDate := qrReturnDate
		if qReturnDate != "" {
			if err := r.SetQueryParam("returnDate", qReturnDate); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param to
		var qrTo string
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
