// Code generated by go-swagger; DO NOT EDIT.

package itineraries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
)

// GetItinerariesURL generates an URL for the get itineraries operation
type GetItinerariesURL struct {
	DepartureDate *string
	DepartureTime *string
	From          *string
	ReturnDate    *string
	ReturnTime    *string
	To            *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetItinerariesURL) WithBasePath(bp string) *GetItinerariesURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetItinerariesURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetItinerariesURL) Build() (*url.URL, error) {
	var result url.URL

	var _path = "/itineraries"

	_basePath := o._basePath
	result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var departureDate string
	if o.DepartureDate != nil {
		departureDate = *o.DepartureDate
	}
	if departureDate != "" {
		qs.Set("departureDate", departureDate)
	}

	var departureTime string
	if o.DepartureTime != nil {
		departureTime = *o.DepartureTime
	}
	if departureTime != "" {
		qs.Set("departureTime", departureTime)
	}

	var from string
	if o.From != nil {
		from = *o.From
	}
	if from != "" {
		qs.Set("from", from)
	}

	var returnDate string
	if o.ReturnDate != nil {
		returnDate = *o.ReturnDate
	}
	if returnDate != "" {
		qs.Set("returnDate", returnDate)
	}

	var returnTime string
	if o.ReturnTime != nil {
		returnTime = *o.ReturnTime
	}
	if returnTime != "" {
		qs.Set("returnTime", returnTime)
	}

	var to string
	if o.To != nil {
		to = *o.To
	}
	if to != "" {
		qs.Set("to", to)
	}

	result.RawQuery = qs.Encode()

	return &result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetItinerariesURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetItinerariesURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetItinerariesURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetItinerariesURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetItinerariesURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetItinerariesURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
